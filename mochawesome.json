{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-25T17:31:40.288Z",
    "end": "2025-07-25T17:31:40.380Z",
    "duration": 92,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a83a5b81-99d3-47d1-bb87-ab4c938bdc1d",
      "title": "",
      "fullFile": "/home/runner/work/testApi/testApi/test/login.test.js",
      "file": "/test/login.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "13747b93-8607-4995-9d71-810e23a8a9c3",
          "title": "Login",
          "fullFile": "/home/runner/work/testApi/testApi/test/login.test.js",
          "file": "/test/login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5bf28fc5-5a07-4f54-a62f-abd210aca4e6",
              "title": "POST /api/login",
              "fullFile": "/home/runner/work/testApi/testApi/test/login.test.js",
              "file": "/test/login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ao usar credenciais válidas com um token em string, deve retornar 200 e fazer login com sucesso",
                  "fullTitle": "Login POST /api/login ao usar credenciais válidas com um token em string, deve retornar 200 e fazer login com sucesso",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request('http://localhost:3001')\n  .post('/api/login')\n  .set('Content-Type', 'application/json')\n  .send({\n    'username': 'marcelo.salmeron',\n    'password': '123456'\n  })\nexpect(response.status).to.equal(200);\nexpect(response.body.token).to.be.a('string');",
                  "err": {},
                  "uuid": "de8e3191-dc94-41a2-9a67-64d77a4cc0d0",
                  "parentUUID": "5bf28fc5-5a07-4f54-a62f-abd210aca4e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ao usar credenciais inválidas com um token em string, deve retornar 401 ou 423 se bloqueado",
                  "fullTitle": "Login POST /api/login ao usar credenciais inválidas com um token em string, deve retornar 401 ou 423 se bloqueado",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request('http://localhost:3001')\n  .post('/api/login')\n  .set('Content-Type', 'application/json')\n  .send({\n    'username': 'Administrador',\n    'password': 'senhaerrada'\n  })\nexpect([401, 423]).to.include(response.status);",
                  "err": {},
                  "uuid": "a9e95898-0837-4bac-9ed4-c60f17d1e712",
                  "parentUUID": "5bf28fc5-5a07-4f54-a62f-abd210aca4e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ao realizar 3 tentativas, deve retornar 423 com o bloqueio da senha",
                  "fullTitle": "Login POST /api/login ao realizar 3 tentativas, deve retornar 423 com o bloqueio da senha",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const url = 'http://localhost:3001'\nconst loginPayload = {\n  'username': 'admin',\n  'password': 'senhaerrada'\n}\nconst tentarLogin = async () => {\n  return await request(url)\n    .post('/api/login')\n    .set('Content-Type', 'application/json')\n    .send(loginPayload)\n}\nconst res1 = await tentarLogin();\nexpect([401, 423]).to.include(res1.status);\nconst res2 = await tentarLogin();\nexpect([401, 423]).to.include(res2.status);\nconst res3 = await tentarLogin();\nexpect(res3.status).to.equal(423);\nconst res4 = await tentarLogin();\nexpect(res4.status).to.equal(423);",
                  "err": {},
                  "uuid": "da4e114b-8eae-4455-ad81-1ac39fb68283",
                  "parentUUID": "5bf28fc5-5a07-4f54-a62f-abd210aca4e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Esqueci minha senha - deve retornar 200 e mensagem de sucesso ao enviar e-mail válido",
                  "fullTitle": "Login POST /api/login Esqueci minha senha - deve retornar 200 e mensagem de sucesso ao enviar e-mail válido",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request('http://localhost:3001')\n  .post('/api/forgot-password')\n  .set('Content-Type', 'application/json')\n  .send({\n    email: 'usuario@teste.com'\n  });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('success').that.is.a('boolean');\nexpect(response.body).to.have.property('message').that.is.a('string');\nexpect(response.body.success).to.be.true;\nexpect(response.body.message).to.match(/email.*enviado/i);",
                  "err": {},
                  "uuid": "6cca61aa-92bb-4175-a575-c054111194b9",
                  "parentUUID": "5bf28fc5-5a07-4f54-a62f-abd210aca4e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Esqueci minha senha - deve retornar 400 ao enviar e-mail inválido",
                  "fullTitle": "Login POST /api/login Esqueci minha senha - deve retornar 400 ao enviar e-mail inválido",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request('http://localhost:3001')\n  .post('/api/forgot-password')\n  .set('Content-Type', 'application/json')\n  .send({\n    email: 'emailinvalido'\n  });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property('success').that.is.a('boolean');\nexpect(response.body).to.have.property('message').that.is.a('string');\nexpect(response.body.success).to.be.false;\nexpect(response.body.message).to.match(/email.*inválido/i);",
                  "err": {},
                  "uuid": "deb9df11-ce64-472a-b05c-72fec48e2ccc",
                  "parentUUID": "5bf28fc5-5a07-4f54-a62f-abd210aca4e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de8e3191-dc94-41a2-9a67-64d77a4cc0d0",
                "a9e95898-0837-4bac-9ed4-c60f17d1e712",
                "da4e114b-8eae-4455-ad81-1ac39fb68283",
                "6cca61aa-92bb-4175-a575-c054111194b9",
                "deb9df11-ce64-472a-b05c-72fec48e2ccc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}